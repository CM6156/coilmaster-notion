import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Link, useNavigate, useSearchParams } from "react-router-dom";
import { useToast } from "@/hooks/use-toast";
import { useLanguage } from "@/context/LanguageContext";
import LanguageSelector from "@/components/LanguageSelector";
import { ArrowLeft, Lock, Eye, EyeOff, CheckCircle, Loader2, AlertCircle } from "lucide-react";
import { supabase } from "@/lib/supabase";

export default function ResetPassword() {
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [isValidating, setIsValidating] = useState(true);
  const [isTokenValid, setIsTokenValid] = useState(false);
  const [validationError, setValidationError] = useState<string | null>(null);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const { translations, language } = useLanguage();

  // URLÏóêÏÑú ÌÜ†ÌÅ∞ ÌôïÏù∏ Î∞è Ïù∏Ï¶ù ÏÉÅÌÉú Î¶¨Ïä§ÎÑà
  useEffect(() => {
    let mounted = true;
    let validationTimeout: NodeJS.Timeout;
    let recoveryDetected = false;

    const finalizeValidation = (isValid: boolean, errorMessage?: string) => {
      if (!mounted) return;
      
      setIsValidating(false);
      setIsTokenValid(isValid);
      
      if (!isValid && errorMessage) {
        setValidationError(errorMessage);
      }
    };

    const checkSession = async () => {
      console.log("üîç ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï ÏÑ∏ÏÖò ÌôïÏù∏ ÏãúÏûë");
      console.log("ÌòÑÏû¨ URL:", window.location.href);
      console.log("Search params:", searchParams.toString());
      console.log("Hash:", window.location.hash);
      
      // URL ÌååÎùºÎØ∏ÌÑ∞ ÏÉÅÏÑ∏ Î∂ÑÏÑù
      const hashParams = new URLSearchParams(window.location.hash.substring(1));
              console.log("Hash ÌååÎùºÎØ∏ÌÑ∞ Î∂ÑÏÑù:");
        console.log("- access_token:", hashParams.get('access_token') ? 'ÏûàÏùå' : 'ÏóÜÏùå');
        console.log("- refresh_token:", hashParams.get('refresh_token') ? 'ÏûàÏùå' : 'ÏóÜÏùå');
        console.log("- type:", hashParams.get('type'));
        console.log("- expires_at:", hashParams.get('expires_at'));
        
        // ÏΩîÎìú Î≤ÑÏ†Ñ ÌôïÏù∏Ïö©
        console.log("üÜï ÏΩîÎìú Î≤ÑÏ†Ñ: 2024-01-20-17:30 - FINAL FIX Î∞∞Ìè¨Îê®");
      
      console.log("Search ÌååÎùºÎØ∏ÌÑ∞ Î∂ÑÏÑù:");
      for (const [key, value] of searchParams) {
        console.log(`- ${key}:`, value);
      }
      
      try {
        // Î®ºÏ†Ä ÌòÑÏû¨ ÏÑ∏ÏÖò ÌôïÏù∏
        const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
        
        if (sessionError) {
          console.error("ÏÑ∏ÏÖò ÌôïÏù∏ Ïò§Î•ò:", sessionError);
        }
        
        console.log("ÌòÑÏû¨ ÏÑ∏ÏÖò:", sessionData.session ? "ÏûàÏùå" : "ÏóÜÏùå");
        
        // ÏÑ∏ÏÖòÏù¥ Ïù¥ÎØ∏ ÏûàÏúºÎ©¥ ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï Í∞ÄÎä•
        if (sessionData.session) {
          console.log("‚úÖ Ïú†Ìö®Ìïú ÏÑ∏ÏÖò Î∞úÍ≤¨, ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï Í∞ÄÎä•");
          finalizeValidation(true);
          return;
        }
        
        // URLÏóêÏÑú ÌÜ†ÌÅ∞ Ï∂îÏ∂ú (Query Parameters Î∞©Ïãù)
        let accessToken = searchParams.get('access_token');
        let refreshToken = searchParams.get('refresh_token');
        let type = searchParams.get('type');
        
        // URL HashÏóêÏÑú ÌÜ†ÌÅ∞ Ï∂îÏ∂ú (Supabase Í∏∞Î≥∏ Î∞©Ïãù)
        if (!accessToken && window.location.hash) {
          const hashParams = new URLSearchParams(window.location.hash.substring(1));
          accessToken = hashParams.get('access_token');
          refreshToken = hashParams.get('refresh_token');
          type = hashParams.get('type');
          
          console.log("HashÏóêÏÑú Ï∂îÏ∂úÌïú ÌÜ†ÌÅ∞Îì§:");
          console.log("- access_token:", accessToken ? "ÏûàÏùå" : "ÏóÜÏùå");
          console.log("- refresh_token:", refreshToken ? "ÏûàÏùå" : "ÏóÜÏùå");
          console.log("- type:", type);
        }
        
        // access_tokenÍ≥º type=recoveryÍ∞Ä ÏûàÏúºÎ©¥ ÏßÑÌñâ (refresh_tokenÏùÄ ÏÑ†ÌÉùÏÇ¨Ìï≠)
        if (accessToken && type === 'recovery') {
          console.log("üîë Ïú†Ìö®Ìïú ÌÜ†ÌÅ∞ Î∞úÍ≤¨, ÏÑ∏ÏÖò ÏÑ§Ï†ï ÏãúÎèÑ");
          
          try {
            if (refreshToken) {
              console.log("üìù refresh_tokenÏù¥ ÏûàÏùå - setSession ÏÇ¨Ïö©");
              // refresh_tokenÏù¥ ÏûàÎäî Í≤ΩÏö∞ setSession ÏÇ¨Ïö©
              const { data: sessionData, error: sessionError } = await supabase.auth.setSession({
                access_token: accessToken,
                refresh_token: refreshToken
              });
              
              if (sessionError) {
                console.error("ÏÑ∏ÏÖò ÏÑ§Ï†ï Ïò§Î•ò:", sessionError);
                throw new Error("ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï ÎßÅÌÅ¨Í∞Ä ÎßåÎ£åÎêòÏóàÍ±∞ÎÇò Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.");
              }
              
              if (sessionData.session) {
                console.log("‚úÖ ÏÑ∏ÏÖò ÏÑ§Ï†ï ÏÑ±Í≥µ (setSession)");
                if (mounted) {
                  window.history.replaceState({}, document.title, "/reset-password");
                }
                finalizeValidation(true);
                return;
              }
            } else {
              console.log("üîÑ refresh_tokenÏù¥ ÏóÜÏùå - ÌÜ†ÌÅ∞ Í≤ÄÏ¶ù ÌõÑ ÏßÅÏ†ë ÏßÑÌñâ");
              
              // access_tokenÏúºÎ°ú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
              const { data: userData, error: userError } = await supabase.auth.getUser(accessToken);
              
              if (userError || !userData.user) {
                throw new Error("ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÍ±∞ÎÇò ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§.");
              }
              
              console.log("‚úÖ ÌÜ†ÌÅ∞ Í≤ÄÏ¶ù ÏÑ±Í≥µ - ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï ÌóàÏö©");
              // URLÏóêÏÑú ÌÜ†ÌÅ∞ Ï†úÍ±∞
              if (mounted) {
                window.history.replaceState({}, document.title, "/reset-password");
              }
              finalizeValidation(true);
              return;
            }
          } catch (error: any) {
            console.error("ÌÜ†ÌÅ∞ Ï≤òÎ¶¨ Ïò§Î•ò:", error);
            throw error;
          }
        } else {
          console.log("‚ùå ÌïÑÏöîÌïú ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏùå - PASSWORD_RECOVERY Ïù¥Î≤§Ìä∏Î•º Í∏∞Îã§Î¶ΩÎãàÎã§");
          console.log("- accessToken:", !!accessToken);
          console.log("- refreshToken:", !!refreshToken);
          console.log("- type:", type);
          
          // ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏñ¥ÎèÑ Ï¶âÏãú Ïã§Ìå®ÌïòÏßÄ ÏïäÍ≥† PASSWORD_RECOVERY Ïù¥Î≤§Ìä∏Î•º Í∏∞Îã§Î¶º
          // ÌïòÏßÄÎßå ÏßÅÏ†ë Ï†ëÍ∑ºÌïú Í≤ΩÏö∞ Îçî Îπ†Î•¥Í≤å ÏïàÎÇ¥
          if (!recoveryDetected) {
            validationTimeout = setTimeout(() => {
              if (mounted && !recoveryDetected) {
                const errorMsg = language === "ko" ? 
                  "ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ïÏùÄ Ïù¥Î©îÏùº ÎßÅÌÅ¨Î•º ÌÜµÌï¥ÏÑúÎßå Í∞ÄÎä•Ìï©ÎãàÎã§. ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞Î•º Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî." :
                  language === "en" ? 
                  "Password reset is only available through email link. Please try password recovery again." :
                  language === "zh" ? 
                  "ÂØÜÁ†ÅÈáçÁΩÆÂè™ËÉΩÈÄöËøáÈÇÆ‰ª∂ÈìæÊé•ËøõË°å„ÄÇËØ∑ÈáçÊñ∞Â∞ùËØïÂØÜÁ†ÅÊÅ¢Â§ç„ÄÇ" :
                  "‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
                
                finalizeValidation(false, errorMsg);
              }
            }, 3000); // 3Ï¥àÎ°ú Îã®Ï∂ï
          }
        }
        
      } catch (error: any) {
        console.error("ÌÜ†ÌÅ∞ Ï≤òÎ¶¨ Ïò§Î•ò:", error);
        finalizeValidation(false, error.message || "ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï ÎßÅÌÅ¨Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.");
      }
    };

    // Ïù∏Ï¶ù ÏÉÅÌÉú Î≥ÄÌôî Î¶¨Ïä§ÎÑà
    const { data: authListener } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log("üîÑ Ïù∏Ï¶ù ÏÉÅÌÉú Î≥ÄÌôî:", event, session ? "ÏÑ∏ÏÖò ÏûàÏùå" : "ÏÑ∏ÏÖò ÏóÜÏùå");
      
      if (event === 'PASSWORD_RECOVERY') {
        console.log("üîê ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥µÍµ¨ Ïù¥Î≤§Ìä∏ Í∞êÏßÄ - ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®Ìï®");
        recoveryDetected = true;
        
        // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ Ï∑®ÏÜå
        if (validationTimeout) {
          clearTimeout(validationTimeout);
        }
        
        finalizeValidation(true);
        return;
      }
      
      if (event === 'SIGNED_IN' && session) {
        console.log("‚úÖ Î°úÍ∑∏Ïù∏ ÏôÑÎ£å - ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï Í∞ÄÎä•");
        recoveryDetected = true;
        
        if (validationTimeout) {
          clearTimeout(validationTimeout);
        }
        
        finalizeValidation(true);
        return;
      }
      
      if (event === 'SIGNED_OUT') {
        console.log("üö™ Î°úÍ∑∏ÏïÑÏõÉ Í∞êÏßÄ");
        if (mounted && !isValidating) {
          navigate("/login");
        }
      }
    });

    // Ï¥àÍ∏∞ ÏÑ∏ÏÖò ÌôïÏù∏ ÏãúÏûë
    checkSession();

    return () => {
      mounted = false;
      if (validationTimeout) {
        clearTimeout(validationTimeout);
      }
      authListener?.subscription?.unsubscribe();
    };
  }, [searchParams, navigate, isValidating]);

  // Translation fallbacks
  const t = {
    title: language === "ko" ? "ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÑ§Ï†ï" : 
           language === "en" ? "Set New Password" : 
           language === "zh" ? "ËÆæÁΩÆÊñ∞ÂØÜÁ†Å" : "‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà",
    description: language === "ko" ? "ÏÉàÎ°úÏö¥ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏó¨ Í≥ÑÏ†ïÏùÑ Î≥¥Ìò∏ÌïòÏÑ∏Ïöî." : 
                 language === "en" ? "Enter a new password to secure your account." : 
                 language === "zh" ? "ËæìÂÖ•Êñ∞ÂØÜÁ†Å‰ª•‰øùÊä§ÊÇ®ÁöÑË¥¶Êà∑„ÄÇ" : "‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
    validating: language === "ko" ? "ÎßÅÌÅ¨ Í≤ÄÏ¶ù Ï§ë..." : 
                language === "en" ? "Validating link..." : 
                language === "zh" ? "Ê≠£Âú®È™åËØÅÈìæÊé•..." : "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå...",
    validatingDesc: language === "ko" ? "ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï ÎßÅÌÅ¨Î•º ÌôïÏù∏ÌïòÍ≥† ÏûàÏäµÎãàÎã§." : 
                    language === "en" ? "Verifying your password reset link." : 
                    language === "zh" ? "Ê≠£Âú®È™åËØÅÊÇ®ÁöÑÂØÜÁ†ÅÈáçÁΩÆÈìæÊé•„ÄÇ" : "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
    invalidLink: language === "ko" ? "Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÎßÅÌÅ¨" : 
                 language === "en" ? "Invalid Link" : 
                 language === "zh" ? "Êó†ÊïàÈìæÊé•" : "‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
    tryAgain: language === "ko" ? "Îã§Ïãú ÏãúÎèÑ" : 
              language === "en" ? "Try Again" : 
              language === "zh" ? "ÈáçËØï" : "‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
    requestNew: language === "ko" ? "ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞" : 
                language === "en" ? "Forgot Password" : 
                language === "zh" ? "ÂøòËÆ∞ÂØÜÁ†Å" : "‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
    newPassword: language === "ko" ? "ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏" : 
                 language === "en" ? "New Password" : 
                 language === "zh" ? "Êñ∞ÂØÜÁ†Å" : "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà",
    confirmPassword: language === "ko" ? "ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏" : 
                     language === "en" ? "Confirm Password" : 
                     language === "zh" ? "Á°ÆËÆ§ÂØÜÁ†Å" : "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
    updatePassword: language === "ko" ? "ÎπÑÎ∞ÄÎ≤àÌò∏ ÏóÖÎç∞Ïù¥Ìä∏" : 
                    language === "en" ? "Update Password" : 
                    language === "zh" ? "Êõ¥Êñ∞ÂØÜÁ†Å" : "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
    updating: language === "ko" ? "ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë..." : 
              language === "en" ? "Updating..." : 
              language === "zh" ? "Êõ¥Êñ∞‰∏≠..." : "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï...",
    backToLogin: language === "ko" ? "Î°úÍ∑∏Ïù∏ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞" : 
                 language === "en" ? "Back to Login" : 
                 language === "zh" ? "ËøîÂõûÁôªÂΩï" : "‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
    successMessage: language === "ko" ? "ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§!" : 
                    language === "en" ? "Password has been successfully changed!" : 
                    language === "zh" ? "ÂØÜÁ†ÅÂ∑≤ÊàêÂäüÊõ¥ÊîπÔºÅ" : "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!",
    successDescription: language === "ko" ? "Ïù¥Ï†ú ÏÉàÎ°úÏö¥ ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Î°úÍ∑∏Ïù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§." : 
                        language === "en" ? "You can now login with your new password." : 
                        language === "zh" ? "ÊÇ®Áé∞Âú®ÂèØ‰ª•‰ΩøÁî®Êñ∞ÂØÜÁ†ÅÁôªÂΩï„ÄÇ" : "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß",
    loginNow: language === "ko" ? "ÏßÄÍ∏à Î°úÍ∑∏Ïù∏" : 
              language === "en" ? "Login Now" : 
              language === "zh" ? "Á´ãÂç≥ÁôªÂΩï" : "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ",
  };

  const formSchema = z.object({
    password: z.string()
      .min(6, language === "ko" ? "ÎπÑÎ∞ÄÎ≤àÌò∏Îäî ÏµúÏÜå 6Ïûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§" : 
               language === "en" ? "Password must be at least 6 characters" : 
               language === "zh" ? "ÂØÜÁ†ÅËá≥Â∞ëÈúÄË¶Å6‰∏™Â≠óÁ¨¶" : "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"),
    confirmPassword: z.string()
  }).refine((data) => data.password === data.confirmPassword, {
    message: language === "ko" ? "ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§" : 
             language === "en" ? "Passwords don't match" : 
             language === "zh" ? "ÂØÜÁ†Å‰∏çÂåπÈÖç" : "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
    path: ["confirmPassword"],
  });

  type FormValues = z.infer<typeof formSchema>;

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      password: "",
      confirmPassword: "",
    },
  });

  const onSubmit = async (data: FormValues) => {
    setIsLoading(true);
    
    try {
      // ÌòÑÏû¨ ÏÑ∏ÏÖò ÌôïÏù∏
      const { data: sessionData } = await supabase.auth.getSession();
      
      if (sessionData.session) {
        // ÏÑ∏ÏÖòÏù¥ ÏûàÎäî Í≤ΩÏö∞ ÏùºÎ∞òÏ†ÅÏù∏ Î∞©Î≤ï ÏÇ¨Ïö©
        const { error } = await supabase.auth.updateUser({
          password: data.password
        });
        
        if (error) throw error;
      } else {
        // ÏÑ∏ÏÖòÏù¥ ÏóÜÎäî Í≤ΩÏö∞ URLÏóêÏÑú ÌÜ†ÌÅ∞ Ï∂îÏ∂úÌïòÏó¨ ÏûÑÏãú ÏÑ∏ÏÖò ÏÉùÏÑ±
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        const accessToken = hashParams.get('access_token');
        
        if (accessToken) {
          console.log("üîë ÌÜ†ÌÅ∞ÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ ÎπÑÎ∞ÄÎ≤àÌò∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÎèÑ");
          
          // access_tokenÏúºÎ°ú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏ ÌõÑ ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω
          const { data: userData, error: userError } = await supabase.auth.getUser(accessToken);
          
          if (userError || !userData.user) {
            throw new Error("ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§.");
          }
          
          // Ïú†Ìö®Ìïú ÌÜ†ÌÅ∞Ïù¥ÎØÄÎ°ú ÎπÑÎ∞ÄÎ≤àÌò∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏßÑÌñâ
          const { error } = await supabase.auth.updateUser({
            password: data.password
          });
          
          if (error) throw error;
        } else {
          throw new Error("Ïù∏Ï¶ù ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.");
        }
      }
      
      setIsSuccess(true);
      
      toast({
        title: t.successMessage,
        description: t.successDescription,
      });
    } catch (error: any) {
      console.error("ÎπÑÎ∞ÄÎ≤àÌò∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïò§Î•ò:", error);
      
      toast({
        title: language === "ko" ? "Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§" : 
               language === "en" ? "An error occurred" : 
               language === "zh" ? "ÂèëÁîüÈîôËØØ" : "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: error.message || (
          language === "ko" ? "ÎπÑÎ∞ÄÎ≤àÌò∏ ÏóÖÎç∞Ïù¥Ìä∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî." : 
          language === "en" ? "Failed to update password. Please try again." : 
          language === "zh" ? "Êõ¥Êñ∞ÂØÜÁ†ÅÂ§±Ë¥•„ÄÇËØ∑ÂÜçËØï‰∏ÄÊ¨°„ÄÇ" : "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        ),
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleRetry = () => {
    setIsValidating(true);
    setValidationError(null);
    window.location.reload();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center p-4">
      <div className="absolute top-4 right-4">
        <LanguageSelector />
      </div>
      
      <div className="w-full max-w-md">
        <Card className="border-0 shadow-2xl bg-white/95 backdrop-blur-sm">
          <CardHeader className="space-y-1 text-center pb-6">
            <div className="flex justify-center mb-4">
              <div className="p-3 rounded-full bg-gradient-to-r from-purple-500 to-pink-500">
                {isValidating ? (
                  <Loader2 className="h-8 w-8 text-white animate-spin" />
                ) : validationError ? (
                  <AlertCircle className="h-8 w-8 text-white" />
                ) : (
                  <Lock className="h-8 w-8 text-white" />
                )}
              </div>
            </div>
            <CardTitle className="text-2xl font-bold text-slate-800">
              {isValidating ? t.validating : validationError ? t.invalidLink : t.title}
            </CardTitle>
            <CardDescription className="text-slate-600">
              {isValidating ? t.validatingDesc : validationError ? validationError : t.description}
            </CardDescription>
          </CardHeader>
          
          <CardContent>
            {isValidating ? (
              <div className="flex justify-center py-8">
                <Loader2 className="h-8 w-8 animate-spin text-purple-500" />
              </div>
            ) : validationError ? (
              <div className="space-y-4 text-center">
                <div className="bg-amber-50 border border-amber-200 rounded-lg p-4 mb-4">
                  <div className="flex items-center justify-center mb-2">
                    <AlertCircle className="h-5 w-5 text-amber-600" />
                  </div>
                  <p className="text-sm text-amber-800">
                    {language === "ko" ? 
                      "Ïò¨Î∞îÎ•∏ ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï Í≥ºÏ†ï:" :
                      language === "en" ? 
                      "Correct password reset process:" :
                      language === "zh" ? 
                      "Ê≠£Á°ÆÁöÑÂØÜÁ†ÅÈáçÁΩÆÊµÅÁ®ãÔºö" :
                      "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:"
                    }
                  </p>
                  <ol className="text-xs text-amber-700 mt-2 text-left space-y-1">
                    <li>1. {language === "ko" ? "ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞ ÌéòÏù¥ÏßÄÏóêÏÑú Ïù¥Î©îÏùº ÏûÖÎ†•" : 
                           language === "en" ? "Enter email on forgot password page" :
                           language === "zh" ? "Âú®ÂøòËÆ∞ÂØÜÁ†ÅÈ°µÈù¢ËæìÂÖ•ÈÇÆÁÆ±" :
                           "‡∏õ‡πâ‡∏≠‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"}</li>
                    <li>2. {language === "ko" ? "Ïù¥Î©îÏùºÏóêÏÑú Ïû¨ÏÑ§Ï†ï ÎßÅÌÅ¨ ÌÅ¥Î¶≠" : 
                           language === "en" ? "Click reset link in email" :
                           language === "zh" ? "ÁÇπÂáªÈÇÆ‰ª∂‰∏≠ÁöÑÈáçÁΩÆÈìæÊé•" :
                           "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÉ‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•"}</li>
                    <li>3. {language === "ko" ? "ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†•" : 
                           language === "en" ? "Enter new password" :
                           language === "zh" ? "ËæìÂÖ•Êñ∞ÂØÜÁ†Å" :
                           "‡∏õ‡πâ‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"}</li>
                  </ol>
                </div>
                
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                  <div className="flex items-center justify-center mb-2">
                    <AlertCircle className="h-5 w-5 text-red-600" />
                  </div>
                  <p className="text-sm text-red-800 font-medium">
                    {language === "ko" ? 
                      "Î¨∏Ï†ú ÏßÑÎã® ÎèÑÍµ¨" :
                      language === "en" ? 
                      "Problem Diagnosis Tool" :
                      language === "zh" ? 
                      "ÈóÆÈ¢òËØäÊñ≠Â∑•ÂÖ∑" :
                      "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
                    }
                  </p>
                  <p className="text-xs text-red-700 mt-2">
                    {language === "ko" ? 
                      "Í∞úÎ∞úÏûê ÎèÑÍµ¨(F12) ‚Üí Console ÌÉ≠ÏùÑ Ïó¥Ïñ¥ÏÑú URL ÌååÎùºÎØ∏ÌÑ∞ Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî. Ïù¥Î©îÏùº ÎßÅÌÅ¨Ïóê 'access_token'Í≥º 'type=recovery'Í∞Ä ÏûàÏñ¥Ïïº Ìï©ÎãàÎã§." :
                      language === "en" ? 
                      "Open Developer Tools (F12) ‚Üí Console tab to check URL parameter info. Email link should contain 'access_token' and 'type=recovery'." :
                      language === "zh" ? 
                      "ÊâìÂºÄÂºÄÂèëËÄÖÂ∑•ÂÖ∑(F12) ‚Üí ConsoleÈÄâÈ°πÂç°Êü•ÁúãURLÂèÇÊï∞‰ø°ÊÅØ„ÄÇÈÇÆ‰ª∂ÈìæÊé•Â∫îÂåÖÂê´'access_token'Âíå'type=recovery'„ÄÇ" :
                      "‡πÄ‡∏õ‡∏¥‡∏î Developer Tools (F12) ‚Üí ‡πÅ‡∏ó‡πá‡∏ö Console ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• URL parameter ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ 'access_token' ‡πÅ‡∏•‡∏∞ 'type=recovery'"
                    }
                  </p>
                </div>
                <div className="space-y-2">
                  <Link to="/forgot-password">
                    <Button 
                      className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white"
                    >
                      {t.requestNew}
                    </Button>
                  </Link>
                  <Button 
                    onClick={handleRetry}
                    variant="outline"
                    className="w-full border-purple-200 text-purple-600 hover:bg-purple-50"
                  >
                    {t.tryAgain}
                  </Button>
                </div>
              </div>
            ) : !isSuccess ? (
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                  <FormField
                    control={form.control}
                    name="password"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center gap-2">
                          <Lock className="h-4 w-4 text-muted-foreground" />
                          {t.newPassword}
                        </FormLabel>
                        <FormControl>
                          <div className="relative">
                            <Input 
                              type={showPassword ? "text" : "password"}
                              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" 
                              {...field} 
                              autoComplete="new-password"
                              disabled={isLoading}
                              className="pr-10 border-slate-200 focus-visible:ring-purple-500/50"
                            />
                            <button 
                              type="button"
                              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                              onClick={() => setShowPassword(!showPassword)}
                              tabIndex={-1}
                            >
                              {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                            </button>
                          </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="confirmPassword"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="flex items-center gap-2">
                          <Lock className="h-4 w-4 text-muted-foreground" />
                          {t.confirmPassword}
                        </FormLabel>
                        <FormControl>
                          <div className="relative">
                            <Input 
                              type={showConfirmPassword ? "text" : "password"}
                              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" 
                              {...field} 
                              autoComplete="new-password"
                              disabled={isLoading}
                              className="pr-10 border-slate-200 focus-visible:ring-purple-500/50"
                            />
                            <button 
                              type="button"
                              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                              onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                              tabIndex={-1}
                            >
                              {showConfirmPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                            </button>
                          </div>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <Button 
                    type="submit" 
                    className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white" 
                    disabled={isLoading}
                  >
                    {isLoading ? t.updating : t.updatePassword}
                  </Button>
                </form>
              </Form>
            ) : (
              <div className="text-center space-y-6">
                <div className="flex justify-center">
                  <div className="p-3 rounded-full bg-green-100">
                    <CheckCircle className="h-12 w-12 text-green-600" />
                  </div>
                </div>
                <div className="space-y-2">
                  <h3 className="text-lg font-semibold text-slate-800">
                    {t.successMessage}
                  </h3>
                  <p className="text-slate-600">
                    {t.successDescription}
                  </p>
                </div>
                <Button 
                  onClick={() => navigate("/login")}
                  className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white"
                >
                  {t.loginNow}
                </Button>
              </div>
            )}
          </CardContent>
          
          {!isSuccess && !isValidating && !validationError && (
            <div className="px-6 pb-6">
              <Link 
                to="/login" 
                className="text-sm text-purple-600 hover:text-purple-500 hover:underline flex items-center gap-1 justify-center transition-colors"
              >
                <ArrowLeft className="h-4 w-4" /> {t.backToLogin}
              </Link>
            </div>
          )}
        </Card>
      </div>
    </div>
  );
}
